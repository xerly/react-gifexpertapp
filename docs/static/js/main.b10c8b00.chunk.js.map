{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cat","alert","type","placeholder","value","onChange","target","GifGridItem","id","title","image","src","alt","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,UAAU,eAAeC,SATZ,SAACC,GACpBA,EAAEC,iBACFL,EAAWM,OAAOC,OAAS,EACvBT,GAAc,SAACU,GAAD,OAAUR,GAAV,mBAAyBQ,OACvCC,MAAM,mBACVR,EAAc,KAId,SACE,uBACES,KAAK,OACLC,YAAY,kBACZC,MAAOZ,EACPa,SAlBoB,SAACT,GACzBH,EAAcG,EAAEU,OAAOF,a,QCIZG,EATK,SAAC,GAAyB,EAAvBC,GAAwB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAChC,OACE,sBAAKhB,UAAU,yCAAf,UACE,qBAAKiB,IAAKD,EAAOE,IAAKH,IACtB,4BAAIA,Q,uBCNGI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,MAAK,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBV,QAVnB,kBAadM,GAbc,4CAAH,sDCmBLK,EAfC,SAAC,GAAkB,IAAD,ECDN,SAACb,GAAc,IAAD,EACdvB,mBAAS,CACjC8B,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAChB,SAACC,GACCH,EAAS,CACPT,KAAMY,EACNL,SAAS,MAGb,CAACd,OAIEe,EDhB2BK,CADF,EAAfpB,UACHW,EADkB,EACxBJ,KAAcO,EADU,EACVA,QAEtB,OACE,qCACGA,GAAW,mBAAGlC,UAAU,2BAAb,wBACZ,qBAAKA,UAAU,YAAf,SACG+B,EAAOF,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEQjB2B,EAhBM,WAAO,IAAD,EACW5C,mBAAS,CAAC,eADrB,mBAClB6C,EADkB,KACN9C,EADM,KAGzB,OACE,sBAAKI,UAAU,UAAf,UACE,8CACA,cAAC,EAAD,CAAaJ,cAAeA,IAC5B,oBAAII,UAAU,eAAd,SACG0C,EAAWb,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCRxBuB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.b10c8b00.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    inputValue.trim().length > 2\n      ? setCategories((cat) => [inputValue, ...cat])\n      : alert('Text too short!');\n    setInputValue('');\n  };\n\n  return (\n    <form className=\"form-wrapper\" onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Search your GIF\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","import React from 'react';\n\nconst GifGridItem = ({ id, title, image }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={image} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=obHhBBVgewVkdKm91ajBzYbyHaF5g8q7`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      image: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import GifGridItem from './GifGridItem';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      {loading && <p className=\" animate__animated flash\">Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then(\n      (imgs) => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n      },\n      [category]\n    );\n  });\n\n  return state; // { data:[], loading: true };\n};\n","import { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['DragonBall']);\n\n  return (\n    <div className=\"wrapper\">\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <ol className=\"content-grid\">\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}